[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: ScreenFlow.mp4
Video File: ScreenFlow.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.250000
Scroll Position: 1
Active Line: 6
Video Position: 771

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Yuanti SC,36,&H21FFFFFF,&H000000FF,&H002D1505,&H00CD3604,0,0,0,0,100,100,0,0,1,1.78519,2.28519,2,6,6,20,1
Style: Up,Yuanti SC,36,&H21FFFFFF,&H000000FF,&H002D1505,&H00CD3604,0,0,0,0,100,100,0,0,1,1.78519,2.28519,8,6,6,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.96,0:00:03.56,Default,,0,0,0,,大家好，我是猫猫
Dialogue: 0,0:00:00.68,0:00:05.68,Up,,0,0,0,,受海森大佬之邀讲一下Git与Github
Dialogue: 0,0:00:05.68,0:00:10.68,Up,,0,0,0,,没想到讲视频课这这这么麻烦
Dialogue: 0,0:00:10.68,0:00:15.68,Up,,0,0,0,,大佬就是大佬（海森），没有办法的
Dialogue: 0,0:00:15.68,0:00:20.68,Up,,0,0,0,,讲这个“有趣的Linux命令”讲那么好
Dialogue: 0,0:00:20.68,0:00:25.68,Up,,0,0,0,,我就只能靠这个字幕君分散一下你们的注意力
Dialogue: 0,0:00:25.68,0:00:30.68,Up,,0,0,0,,今天是8月17日，也祝长者生日快乐
Dialogue: 0,0:00:30.68,0:00:35.68,Up,,0,0,0,,感谢欢迎观看猫课猫讲系列第一课！！
Dialogue: 0,0:00:03.56,0:00:06.26,Default,,0,0,0,,今天我本来想讲Git与Github
Dialogue: 0,0:00:06.26,0:00:10.40,Default,,0,0,0,,但是Git讲起来实在是内容很多，有点麻烦
Dialogue: 0,0:00:10.40,0:00:13.28,Default,,0,0,0,,所以我现在先讲一个
Dialogue: 0,0:00:13.28,0:00:16.24,Default,,0,0,0,,SSH Key的生成与原理
Dialogue: 0,0:00:16.24,0:00:18.30,Default,,0,0,0,,大家很多时候要用Github
Dialogue: 0,0:00:18.30,0:00:23.68,Default,,0,0,0,,Github要往上传代码仓库
Dialogue: 0,0:00:23.68,0:00:26.58,Default,,0,0,0,,有两种方式可以上传
Dialogue: 0,0:00:26.58,0:00:29.20,Default,,0,0,0,,一种是SSH，一种是HTTPS
Dialogue: 0,0:00:29.20,0:00:32.08,Default,,0,0,0,,我个人是强烈建议用SSH的
Dialogue: 0,0:00:32.08,0:00:35.82,Default,,0,0,0,,因为SSH比HTTPS要安全很多
Dialogue: 0,0:00:37.10,0:00:39.64,Default,,0,0,0,,今天我要演示的就是如何
Dialogue: 0,0:00:39.64,0:00:42.48,Default,,0,0,0,,在本地生成SSH Key
Dialogue: 0,0:00:42.48,0:00:43.94,Default,,0,0,0,,添加到Github上
Dialogue: 0,0:00:43.94,0:00:48.78,Default,,0,0,0,,并且将本地的软件仓库上传到Github上
Dialogue: 0,0:00:48.78,0:00:53.22,Default,,0,0,0,,我们现在在Atom这个文本编辑器里面
Dialogue: 0,0:00:53.22,0:00:56.34,Default,,0,0,0,,先创建一个文件夹
Dialogue: 0,0:00:58.50,0:01:02.52,Default,,0,0,0,,文件夹名字就叫做git_test
Dialogue: 0,0:01:04.18,0:01:08.16,Default,,0,0,0,,这（个文件夹）就是我们将要使用的Git仓库
Dialogue: 0,0:01:08.16,0:01:12.80,Default,,0,0,0,,在里面先加一个文件 test1.txt
Dialogue: 0,0:01:17.92,0:01:21.32,Default,,0,0,0,,在这个 test1.txt 里面加一点内容
Dialogue: 0,0:01:21.32,0:01:26.86,Default,,0,0,0,,然后我们最好再加一个文件 README.md
Dialogue: 0,0:01:26.86,0:01:28.88,Default,,0,0,0,,这是一个Markdown文件
Dialogue: 0,0:01:28.88,0:01:30.24,Default,,0,0,0,,我在里面加一些内容
Dialogue: 0,0:01:30.24,0:01:33.96,Default,,0,0,0,,大家上传到Github上就可以看到效果了
Dialogue: 0,0:01:37.46,0:01:39.76,Default,,0,0,0,,This is a test repository
Dialogue: 0,0:01:40.44,0:01:42.54,Default,,0,0,0,,现在我们打开Terminal（终端）
Dialogue: 0,0:01:43.90,0:01:46.96,Default,,0,0,0,,这个文件夹我们刚刚创建，还不是一个Git仓库
Dialogue: 0,0:01:46.96,0:01:50.46,Default,,0,0,0,,所以我们先要确定在这个文件夹内
Dialogue: 0,0:01:46.96,0:01:52.00,Up,,0,0,0,,用 {\fnMonaco}pwd{\fn} 来确定shell的工作目录是当前操作的文件夹\N假如不是，需要用 {\fnMonaco}cd{\fn} 命令来切换
Dialogue: 0,0:01:51.72,0:01:54.34,Default,,0,0,0,,git init
Dialogue: 0,0:01:54.34,0:01:56.64,Default,,0,0,0,,来生成一个新的软件仓库
Dialogue: 0,0:01:56.64,0:01:59.88,Default,,0,0,0,,可以看到，一个 .git 文件夹被创建了
Dialogue: 0,0:01:59.88,0:02:02.34,Default,,0,0,0,,接下去我们要添加这两个文件
Dialogue: 0,0:01:59.88,0:02:14.06,Up,,0,0,0,,这里有个很重要的点忘记讲了，在提交之前千万要设置好Git的用户名和邮箱\N{\fnMonaco}git config --global user.name [{\fn}你的名字{\fnMonaco}]\N{\fnMonaco}git config --global user.email [{\fn}名字@邮箱{\fnMonaco}.com]\N{\fn}我就是因为这里忘了设置了所以后面出现了严重的问题，彻底爆炸
Dialogue: 0,0:02:02.34,0:02:04.24,Default,,0,0,0,,从工作区添加到暂存区
Dialogue: 0,0:02:04.24,0:02:09.84,Default,,0,0,0,,{\fnMonaco}git add README.md test1.txt
Dialogue: 0,0:02:10.32,0:02:13.14,Default,,0,0,0,,接下去我们要 commit
Dialogue: 0,0:02:10.32,0:02:17.22,Up,,0,0,0,,{\fnMonaco}git commit -m 'Initial Commit'
Dialogue: 0,0:02:18.20,0:02:21.06,Default,,0,0,0,,这两个文件就添加到版本库里了
Dialogue: 0,0:02:21.06,0:02:24.28,Default,,0,0,0,,现在我们就要把这样一个
Dialogue: 0,0:02:24.28,0:02:28.58,Default,,0,0,0,,本地存放的Git仓库上传到Github上
Dialogue: 0,0:02:28.58,0:02:32.64,Default,,0,0,0,,要想访问Github，首先你要有一个Github账号
Dialogue: 0,0:02:32.64,0:02:36.20,Default,,0,0,0,,可以看到我们打开 github.com 之后
Dialogue: 0,0:02:36.20,0:02:37.66,Default,,0,0,0,,主页上就可以注册
Dialogue: 0,0:02:37.66,0:02:42.96,Default,,0,0,0,,我们现在已经有账户了，所以直接点登陆（Sign in)
Dialogue: 0,0:02:46.46,0:02:49.64,Default,,0,0,0,,可以看到这个账户里还没有任何Git仓库（Git Repository）
Dialogue: 0,0:02:49.64,0:02:53.44,Default,,0,0,0,,所以要在右上角点击这个加号
Dialogue: 0,0:02:53.44,0:02:57.78,Default,,0,0,0,,点击New Repository（新建仓库）
Dialogue: 0,0:02:57.78,0:02:59.80,Default,,0,0,0,,在这里输入这个仓库的名字
Dialogue: 0,0:02:59.80,0:03:02.16,Default,,0,0,0,,不一定要和这个文件夹的名字相同
Dialogue: 0,0:03:02.16,0:03:06.88,Default,,0,0,0,,我么就打 git_test
Dialogue: 0,0:03:06.88,0:03:11.06,Default,,0,0,0,,这是Git仓库的描述，可写可不写
Dialogue: 0,0:03:11.06,0:03:13.84,Default,,0,0,0,,现在就暂时不写
Dialogue: 0,0:03:13.84,0:03:17.24,Default,,0,0,0,,这里全部都不要选
Dialogue: 0,0:03:13.84,0:03:21.74,Up,,0,0,0,,这些都不选的原因是选择任意一项都会在仓库里引入文件\N只要在仓库里引入文件，就会有一个 Commit， 这样远端会和本地冲突。\N冲突的远端在上传之前需要{\fnMonaco} git pull {\fn}将远端和本地分支合并，在这里不会介绍。
Dialogue: 0,0:03:17.24,0:03:20.20,Default,,0,0,0,,我们要创建一个完全空的Git仓库
Dialogue: 0,0:03:20.20,0:03:23.20,Default,,0,0,0,,点击Create （创建仓库）
Dialogue: 0,0:03:24.60,0:03:28.50,Default,,0,0,0,,可以看到Github给我们了一些教程
Dialogue: 0,0:03:28.50,0:03:34.20,Default,,0,0,0,,如何将本地的Git仓库上传到Github
Dialogue: 0,0:03:34.20,0:03:39.86,Default,,0,0,0,,我们今天要用的是SSH
Dialogue: 0,0:03:39.86,0:03:43.62,Default,,0,0,0,,所以复制这个SSH链接
Dialogue: 0,0:03:44.46,0:03:46.96,Default,,0,0,0,,然后在这个命令行窗口输入
Dialogue: 0,0:03:46.96,0:03:50.46,Default,,0,0,0,,{\fnMonaco}git remote add origin [...]
Dialogue: 0,0:03:50.46,0:03:54.44,Default,,0,0,0,,这个origin是Git Remote（远端）的名字
Dialogue: 0,0:03:54.44,0:03:55.58,Default,,0,0,0,,可以随便取
Dialogue: 0,0:03:55.58,0:04:02.44,Default,,0,0,0,,现在只有一个远端，所以最好用它的默认名字origin
Dialogue: 0,0:04:02.44,0:04:10.30,Default,,0,0,0,,粘贴我们刚才获得的SSH地址
Dialogue: 0,0:04:12.40,0:04:16.16,Default,,0,0,0,,然后我们可以看到，在commit（提交）以后
Dialogue: 0,0:04:16.16,0:04:18.72,Default,,0,0,0,,然后 git remote add
Dialogue: 0,0:04:18.72,0:04:23.26,Default,,0,0,0,,我们就可以{\fnMonaco} git push -u origin master
Dialogue: 0,0:04:23.26,0:04:26.94,Default,,0,0,0,,先试试看这条命令可不可以执行
Dialogue: 0,0:04:32.52,0:04:35.00,Default,,0,0,0,,这里一般直接打yes
Dialogue: 0,0:04:38.36,0:04:42.64,Default,,0,0,0,,可以看到这里有个错误 Permission Denied
Dialogue: 0,0:04:42.64,0:04:44.02,Default,,0,0,0,,为什么会这样呢
Dialogue: 0,0:04:44.02,0:04:47.38,Default,,0,0,0,,因为我们还没有生成一个可以用的SSH Key
Dialogue: 0,0:04:47.38,0:04:51.28,Default,,0,0,0,,所以接下去就要讲如何生成SSH Key
Dialogue: 0,0:04:51.28,0:04:54.68,Default,,0,0,0,,在生成SSH Key之前首先要了解一下
Dialogue: 0,0:04:54.68,0:04:58.64,Default,,0,0,0,,公钥私玥加密法（Public Key Cryptography）和普通的加密方法有什么区别
Dialogue: 0,0:04:58.64,0:05:02.08,Default,,0,0,0,,加密的世界里主要有两种算法
Dialogue: 0,0:05:02.08,0:05:05.46,Default,,0,0,0,,一种是对称加密法（Symmetric-key Cryptography）
Dialogue: 0,0:05:05.46,0:05:08.14,Default,,0,0,0,,对称加密法就是我们平常用的
Dialogue: 0,0:05:08.14,0:05:12.44,Default,,0,0,0,,有一段明文
Dialogue: 0,0:05:12.44,0:05:17.36,Default,,0,0,0,,只用一个Key把它转换称密文
Dialogue: 0,0:05:17.36,0:05:22.90,Default,,0,0,0,,然后再通过相同的Key从密文转换成明文
Dialogue: 0,0:05:22.90,0:05:25.38,Default,,0,0,0,,这就称为对称加密法
Dialogue: 0,0:05:25.38,0:05:30.90,Default,,0,0,0,,公钥私钥加密法是一种非对称加密法（Asymmetric-key Cryptography）
Dialogue: 0,0:05:30.90,0:05:33.24,Default,,0,0,0,,它的Key（密钥）有两个（其实是一个Key Pair，密钥对）
Dialogue: 0,0:05:33.24,0:05:35.24,Default,,0,0,0,,一个是公玥，一个是私钥
Dialogue: 0,0:05:35.24,0:05:40.08,Default,,0,0,0,,Public Key 和 Private Key
Dialogue: 0,0:05:40.08,0:05:42.94,Default,,0,0,0,,有一段明文
Dialogue: 0,0:05:42.94,0:05:47.66,Default,,0,0,0,,需要通过某个人的公钥
Dialogue: 0,0:05:47.66,0:05:51.28,Default,,0,0,0,,加密成密文
Dialogue: 0,0:05:52.18,0:05:55.50,Default,,0,0,0,,然而密文却不能用这个公钥来解密
Dialogue: 0,0:05:55.50,0:06:00.80,Default,,0,0,0,,必须使用私钥来解密
Dialogue: 0,0:06:00.80,0:06:05.08,Default,,0,0,0,,这样的好处是你的私钥不用给别人
Dialogue: 0,0:06:05.08,0:06:07.50,Default,,0,0,0,,你只要把公钥给别人
Dialogue: 0,0:06:07.50,0:06:09.48,Default,,0,0,0,,别人要给你发送加密的内容
Dialogue: 0,0:06:09.48,0:06:10.90,Default,,0,0,0,,只要用你的公钥
Dialogue: 0,0:06:10.90,0:06:15.18,Default,,0,0,0,,然而其他人又不能用你散播出去的公钥解密
Dialogue: 0,0:06:15.18,0:06:19.36,Default,,0,0,0,,只能用自己拥有的私钥来解密
Dialogue: 0,0:06:19.36,0:06:25.12,Default,,0,0,0,,SSH Key验证的原理是这样的
Dialogue: 0,0:06:25.32,0:06:26.96,Default,,0,0,0,,这是服务端
Dialogue: 0,0:06:30.08,0:06:32.50,Default,,0,0,0,,这是客户端
Dialogue: 0,0:06:35.04,0:06:41.22,Default,,0,0,0,,你在客户端上生成一组（一对）Key
Dialogue: 0,0:06:43.28,0:06:47.28,Default,,0,0,0,,我把我的公钥告诉服务端
Dialogue: 0,0:06:43.28,0:06:52.80,Up,,0,0,0,,（敲黑板）这里看牢了！
Dialogue: 0,0:06:47.28,0:06:53.28,Default,,0,0,0,,当我请求验证的时候，服务端首先生成一段随机字符
Dialogue: 0,0:06:56.24,0:06:59.80,Default,,0,0,0,,然后它用我的公钥加密
Dialogue: 0,0:07:05.62,0:07:06.90,Default,,0,0,0,,变成一段密文
Dialogue: 0,0:07:06.90,0:07:09.46,Default,,0,0,0,,然后把这段密文发给客户端
Dialogue: 0,0:07:09.46,0:07:13.46,Default,,0,0,0,,客户端使用它的私钥把这段密文解密
Dialogue: 0,0:07:18.50,0:07:21.88,Default,,0,0,0,,重新生成这段随机内容
Dialogue: 0,0:07:21.88,0:07:23.88,Default,,0,0,0,,发给了服务端
Dialogue: 0,0:07:23.88,0:07:27.50,Default,,0,0,0,,这时候服务端就把它之前生成的随机文本
Dialogue: 0,0:07:27.50,0:07:30.30,Default,,0,0,0,,和解密后收到的随机文本进行对比
Dialogue: 0,0:07:30.30,0:07:32.38,Default,,0,0,0,,假如两个一样的话
Dialogue: 0,0:07:32.38,0:07:34.18,Default,,0,0,0,,那验证就算成功了
Dialogue: 0,0:07:34.18,0:07:37.60,Default,,0,0,0,,客户端和服务端成功建立连接
Dialogue: 0,0:07:38.42,0:07:39.88,Default,,0,0,0,,大家可以看到
Dialogue: 0,0:07:39.88,0:07:45.22,Default,,0,0,0,,正常情况下客户端和服务端建立SSH连接的时候
Dialogue: 0,0:07:45.22,0:07:49.02,Default,,0,0,0,,客户端输入一段密码
Dialogue: 0,0:07:51.96,0:07:54.52,Default,,0,0,0,,这段密码经过网络传输
Dialogue: 0,0:07:54.52,0:07:56.08,Default,,0,0,0,,很有可能被窃取
Dialogue: 0,0:07:56.08,0:08:00.06,Default,,0,0,0,,假如我们使用SSH Key的话
Dialogue: 0,0:08:00.06,0:08:02.80,Default,,0,0,0,,中间没有任何网络传输
Dialogue: 0,0:08:02.80,0:08:04.28,Default,,0,0,0,,你的私钥
Dialogue: 0,0:08:04.28,0:08:06.50,Default,,0,0,0,,永远保存在你的电脑上
Dialogue: 0,0:08:06.50,0:08:11.88,Default,,0,0,0,,这样就比正常情况要安全很多
Dialogue: 0,0:08:12.72,0:08:16.88,Default,,0,0,0,,我接下来讲一下如何在Unix系统下
Dialogue: 0,0:08:16.88,0:08:18.34,Default,,0,0,0,,生成SSH Key
Dialogue: 0,0:08:18.34,0:08:20.76,Default,,0,0,0,,在Windows系统上可能有些不一样
Dialogue: 0,0:08:20.76,0:08:22.88,Default,,0,0,0,,那我们就暂时不讲
Dialogue: 0,0:08:22.88,0:08:25.08,Default,,0,0,0,,在Unix系统上
Dialogue: 0,0:08:25.08,0:08:26.84,Default,,0,0,0,,包括Mac和Linux
Dialogue: 0,0:08:26.84,0:08:29.94,Default,,0,0,0,,要生成SSH Key
Dialogue: 0,0:08:29.94,0:08:33.98,Default,,0,0,0,,就只要打 ssh-keygen
Dialogue: 0,0:08:34.60,0:08:38.98,Default,,0,0,0,,接下去的参数 -t rsa
Dialogue: 0,0:08:38.98,0:08:43.86,Default,,0,0,0,,这个参数是用来说明这个Key的生成算法
Dialogue: 0,0:08:43.86,0:08:46.30,Default,,0,0,0,,正常情况下选择RSA就行了
Dialogue: 0,0:08:46.30,0:08:48.76,Default,,0,0,0,,-b 2048
Dialogue: 0,0:08:48.76,0:08:51.80,Default,,0,0,0,,这是密钥的长度 2048 bits
Dialogue: 0,0:08:51.80,0:08:56.26,Default,,0,0,0,,可以选择768 - 4096
Dialogue: 0,0:08:56.26,0:09:00.36,Default,,0,0,0,,正常情况下2048已经足够保险
Dialogue: 0,0:09:00.36,0:09:02.32,Default,,0,0,0,,所以我们选2048就行了
Dialogue: 0,0:09:02.32,0:09:04.12,Default,,0,0,0,,接下去 -C
Dialogue: 0,0:09:04.12,0:09:06.38,Default,,0,0,0,,这个是注释
Dialogue: 0,0:09:06.38,0:09:11.48,Default,,0,0,0,,正常情况下就输自己的邮箱地址
Dialogue: 0,0:09:11.48,0:09:13.70,Default,,0,0,0,,如果你有很多SSH Key的话
Dialogue: 0,0:09:13.70,0:09:15.14,Default,,0,0,0,,放在服务器上
Dialogue: 0,0:09:15.14,0:09:19.62,Default,,0,0,0,,这个注释可以帮助区分不同的SSH Key和不同的用途
Dialogue: 0,0:09:19.62,0:09:23.40,Default,,0,0,0,,假如你只有一个，那这里随便写就可以了
Dialogue: 0,0:09:23.40,0:09:25.02,Default,,0,0,0,,敲一下Enter
Dialogue: 0,0:09:25.02,0:09:31.68,Default,,0,0,0,,它会问你这个密钥文件在哪里存放
Dialogue: 0,0:09:31.68,0:09:34.10,Default,,0,0,0,,我们只要默认位置就行了
Dialogue: 0,0:09:34.10,0:09:36.10,Default,,0,0,0,,直接点回车
Dialogue: 0,0:09:36.76,0:09:41.18,Default,,0,0,0,,我们暂时不设密码
Dialogue: 0,0:09:41.66,0:09:44.78,Default,,0,0,0,,这样我们SSH Key就生成好了
Dialogue: 0,0:09:44.78,0:09:48.92,Default,,0,0,0,,生成的SSH Key到底在哪里呢
Dialogue: 0,0:09:51.08,0:09:56.54,Default,,0,0,0,,其实在 ~/.ssh 这个目录下
Dialogue: 0,0:09:56.54,0:09:59.46,Default,,0,0,0,,假如打开这个目录
Dialogue: 0,0:09:59.46,0:10:01.58,Default,,0,0,0,,里面已经有这么两个文件
Dialogue: 0,0:10:01.58,0:10:04.22,Default,,0,0,0,,id_rsa 和 id_rsa.pub
Dialogue: 0,0:10:04.22,0:10:07.46,Default,,0,0,0,,这个 .pub 文件就是公钥
Dialogue: 0,0:10:07.46,0:10:09.48,Default,,0,0,0,,这个就是私钥
Dialogue: 0,0:10:09.48,0:10:12.82,Default,,0,0,0,,任何时候这个私钥是不能告诉别人的
Dialogue: 0,0:10:12.82,0:10:15.72,Default,,0,0,0,,但这个公钥我们是要使用的
Dialogue: 0,0:10:15.72,0:10:19.36,Default,,0,0,0,,所以在这个文件夹里...
Dialogue: 0,0:10:21.24,0:10:25.30,Default,,0,0,0,,cat （猫） id_rsa.pub
Dialogue: 0,0:10:27.10,0:10:30.16,Default,,0,0,0,,我们需要复制这个内容
Dialogue: 0,0:10:30.16,0:10:33.22,Default,,0,0,0,,那既然在Mac上我就直接
Dialogue: 0,0:10:33.22,0:10:35.22,Default,,0,0,0,,pbcopy
Dialogue: 0,0:10:35.22,0:10:39.80,Default,,0,0,0,,这样就把私钥复制到剪贴板了
Dialogue: 0,0:10:40.36,0:10:43.42,Default,,0,0,0,,然后我刚才说了，你的公钥
Dialogue: 0,0:10:43.42,0:10:45.14,Default,,0,0,0,,必须要告诉服务端
Dialogue: 0,0:10:45.14,0:10:48.38,Default,,0,0,0,,那现在我们就要告诉Github
Dialogue: 0,0:10:48.38,0:10:50.36,Default,,0,0,0,,打开Github
Dialogue: 0,0:10:50.36,0:10:53.00,Default,,0,0,0,,点击Settings（设置）
Dialogue: 0,0:10:53.92,0:10:57.40,Default,,0,0,0,,这里有个SSH and GPG keys
Dialogue: 0,0:10:57.40,0:11:00.54,Default,,0,0,0,,New SSH Key （新建SSH Key）
Dialogue: 0,0:11:00.54,0:11:04.18,Default,,0,0,0,,直接在这里粘贴内容
Dialogue: 0,0:11:04.18,0:11:06.26,Default,,0,0,0,,这个Title不取也可以
Dialogue: 0,0:11:06.26,0:11:07.72,Default,,0,0,0,,点击Add（添加）
Dialogue: 0,0:11:09.32,0:11:11.16,Default,,0,0,0,,这样就好了
Dialogue: 0,0:11:11.38,0:11:17.46,Default,,0,0,0,,标题这里自动填上了刚才输入的注释
Dialogue: 0,0:11:17.46,0:11:20.46,Default,,0,0,0,,这样就好了
Dialogue: 0,0:11:21.34,0:11:24.24,Default,,0,0,0,,切换到刚才的目录
Dialogue: 0,0:11:24.94,0:11:31.26,Default,,0,0,0,,重新执行刚才的命令
Dialogue: 0,0:11:41.84,0:11:45.82,Default,,0,0,0,,本地仓库就已经上传完成了
Dialogue: 0,0:11:49.10,0:11:54.08,Default,,0,0,0,,打开Github，找到刚才创建的...
Dialogue: 0,0:11:53.86,0:12:00.50,Up,,0,0,0,,刚才创建的仓库找找找不到了
Dialogue: 0,0:12:03.46,0:12:06.02,Default,,0,0,0,,打开刚才创建的仓库
Dialogue: 0,0:12:06.02,0:12:08.88,Default,,0,0,0,,发现所有的文件已经在上面了
Dialogue: 0,0:12:08.88,0:12:10.88,Default,,0,0,0,,
