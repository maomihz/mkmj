[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: mkmj_crypto_01.mp4
Video File: mkmj_crypto_01.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 261
Active Line: 272
Video Position: 21604

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Yuanti SC,45,&H21FFFFFF,&H000000FF,&H002D1505,&H00CD3604,0,0,0,0,100,100,0,0,1,4.01668,0.2,2,13,13,45,1
Style: Up,Yuanti SC,45,&H21FFFFFF,&H000000FF,&H002D1505,&H00CD3604,0,0,0,0,100,100,0,0,1,4.01668,0.2,8,13,13,45,1
Style: Center,Yuanti SC,70,&H21FFFFFF,&H000000FF,&H002D1505,&H00CD3604,0,0,0,0,100,100,0,0,1,4.01668,0.2,5,13,13,45,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:01.78,Default,,0,0,0,,大家好，我是猫猫
Dialogue: 0,0:00:01.78,0:00:03.34,Default,,0,0,0,,这一期的猫课猫讲
Dialogue: 0,0:00:03.34,0:00:05.48,Default,,0,0,0,,我要讲一个比较有意思的话题
Dialogue: 0,0:00:05.48,0:00:07.90,Default,,0,0,0,,就是 Cryptography，密码学
Dialogue: 0,0:00:07.90,0:00:10.86,Default,,0,0,0,,密码学在我们平时生活中都是非常常用的
Dialogue: 0,0:00:10.86,0:00:13.22,Default,,0,0,0,,在浏览网页的时候我们可以看到
Dialogue: 0,0:00:13.22,0:00:16.54,Default,,0,0,0,,一些网页是用 HTTPS 进行加密的
Dialogue: 0,0:00:16.54,0:00:18.46,Default,,0,0,0,,在访问服务器的时候呢
Dialogue: 0,0:00:18.46,0:00:20.14,Default,,0,0,0,,我们也要用 SSH
Dialogue: 0,0:00:20.14,0:00:23.42,Default,,0,0,0,,SSH 中间的传输也是经过加密的
Dialogue: 0,0:00:23.42,0:00:25.24,Default,,0,0,0,,假如没有密码学的话
Dialogue: 0,0:00:25.24,0:00:28.10,Default,,0,0,0,,在这样一个公共网络上传输数据
Dialogue: 0,0:00:28.10,0:00:30.54,Default,,0,0,0,,很多时候安全都是得不到保障的
Dialogue: 0,0:00:30.54,0:00:33.22,Default,,0,0,0,,密码学也是一个非常非常深奥的话题
Dialogue: 0,0:00:33.22,0:00:35.10,Default,,0,0,0,,需要很强的数学基础
Dialogue: 0,0:00:35.10,0:00:37.78,Default,,0,0,0,,很多东西都是和数学有关的
Dialogue: 0,0:00:37.78,0:00:40.22,Default,,0,0,0,,不是正常的程序员
Dialogue: 0,0:00:40.22,0:00:42.32,Default,,0,0,0,,写写代码就可以懂的
Dialogue: 0,0:00:42.32,0:00:47.10,Default,,0,0,0,,所以说我也不能非常全面地把密码学的东西都介绍
Dialogue: 0,0:00:47.10,0:00:49.38,Default,,0,0,0,,我只会讲一些最最基础的东西
Dialogue: 0,0:00:49.38,0:00:50.96,Default,,0,0,0,,一些常识性的东西
Dialogue: 0,0:00:50.96,0:00:54.76,Default,,0,0,0,,让你对密码学、加密、信息安全这个领域
Dialogue: 0,0:00:54.76,0:00:56.62,Default,,0,0,0,,有一个大致的了解
Dialogue: 0,0:00:56.62,0:00:58.64,Default,,0,0,0,,但是假如你要开发应用
Dialogue: 0,0:00:58.64,0:01:00.92,Default,,0,0,0,,要应用这些密码学的东西的话
Dialogue: 0,0:01:00.92,0:01:04.52,Default,,0,0,0,,不能直接把我说的都照搬照抄过去
Dialogue: 0,0:01:04.52,0:01:06.54,Default,,0,0,0,,一定要自己去查过资料
Dialogue: 0,0:01:06.54,0:01:09.98,Default,,0,0,0,,真正理解它到底是怎么运作的
Dialogue: 0,0:01:09.98,0:01:13.64,Default,,0,0,0,,因为密码学、加密都是非常敏感的
Dialogue: 0,0:01:13.64,0:01:15.98,Default,,0,0,0,,假如你运用有失误的话
Dialogue: 0,0:01:15.98,0:01:19.32,Default,,0,0,0,,那么就可能造成非常严重的问题
Dialogue: 0,0:01:19.32,0:01:22.52,Default,,0,0,0,,还有在讲之前有一点要切记
Dialogue: 0,0:01:22.52,0:01:26.22,Default,,0,0,0,,千万不要自己弄一套加密的系统
Dialogue: 0,0:01:22.52,0:01:27.96,Up,,0,0,0,,（说的就是 Telegram ）
Dialogue: 0,0:01:27.96,0:01:32.90,Up,,0,0,0,,不过我还是相信 Telegram 的 MTProto 的
Dialogue: 0,0:01:26.22,0:01:28.90,Default,,0,0,0,,因为自己去弄一套加密系统呢
Dialogue: 0,0:01:28.90,0:01:31.70,Default,,0,0,0,,虽然你觉得可能问题不是很大
Dialogue: 0,0:01:31.70,0:01:33.88,Default,,0,0,0,,但是破密码这些人
Dialogue: 0,0:01:33.88,0:01:36.00,Default,,0,0,0,,一看就可以看出来，非常容易
Dialogue: 0,0:01:36.00,0:01:39.60,Default,,0,0,0,,那么很多东西，（假如）不是你弄的
Dialogue: 0,0:01:39.60,0:01:42.60,Default,,0,0,0,,是工业级、行业标准的
Dialogue: 0,0:01:42.60,0:01:46.68,Default,,0,0,0,,都是很多人一起完善、一起测试过的
Dialogue: 0,0:01:46.68,0:01:49.24,Default,,0,0,0,,那些东西一定是非常安全的
Dialogue: 0,0:01:49.24,0:01:54.04,Default,,0,0,0,,所以说不要自己弄一套加密的算法
Dialogue: 0,0:01:54.04,0:01:56.54,Default,,0,0,0,,能用别人的就尽量用别人的
Dialogue: 0,0:01:57.16,0:02:00.34,Default,,0,0,0,,这个系列呢我主要要讲这么几个东西
Dialogue: 0,0:02:00.34,0:02:01.94,Default,,0,0,0,,第一个是 Hash（哈希）算法
Dialogue: 0,0:02:01.94,0:02:04.94,Default,,0,0,0,,哈希算法是一种信息摘要算法
Dialogue: 0,0:02:04.94,0:02:07.20,Default,,0,0,0,,这是非常非常重要的
Dialogue: 0,0:02:07.20,0:02:08.86,Default,,0,0,0,,是整个密码学的基础
Dialogue: 0,0:02:08.86,0:02:11.82,Default,,0,0,0,,密码学的方方面面，我之后要讲的很多东西
Dialogue: 0,0:02:11.82,0:02:13.18,Default,,0,0,0,,都要涉及到 Hash
Dialogue: 0,0:02:13.18,0:02:15.14,Default,,0,0,0,,所以Hash这一课
Dialogue: 0,0:02:15.14,0:02:17.52,Default,,0,0,0,,一定要认认真真听，去理解了
Dialogue: 0,0:02:17.80,0:02:20.40,Default,,0,0,0,,Hash 之后呢，我要讲一下
Dialogue: 0,0:02:20.40,0:02:23.66,Default,,0,0,0,,关于加密的几个常见的算法
Dialogue: 0,0:02:23.66,0:02:26.04,Default,,0,0,0,,AES 和 RSA
Dialogue: 0,0:02:26.04,0:02:28.96,Default,,0,0,0,,一个是对称加密法，一个是非对称加密法
Dialogue: 0,0:02:28.96,0:02:32.88,Default,,0,0,0,,我之后也会讲对称加密法和非对称加密法有什么区别
Dialogue: 0,0:02:32.88,0:02:35.30,Default,,0,0,0,,这个之后呢，我要介绍一款软件
Dialogue: 0,0:02:35.30,0:02:37.30,Default,,0,0,0,,叫做 GPG
Dialogue: 0,0:02:37.30,0:02:40.42,Default,,0,0,0,,GPG 是一个开源的加密套件
Dialogue: 0,0:02:40.42,0:02:42.82,Default,,0,0,0,,这是工业标准的一个加密套件
Dialogue: 0,0:02:42.82,0:02:44.58,Default,,0,0,0,,也是一个命令行工具
Dialogue: 0,0:02:44.58,0:02:46.90,Default,,0,0,0,,我要介绍一下如何使用 GPG
Dialogue: 0,0:02:46.90,0:02:48.46,Default,,0,0,0,,来加密数据
Dialogue: 0,0:02:48.76,0:02:51.92,Default,,0,0,0,,这节课我就要讲这样一个 Hash 函数
Dialogue: 0,0:02:51.92,0:02:54.88,Default,,0,0,0,,Hash 函数大家可能也听了比较多了
Dialogue: 0,0:02:54.88,0:02:57.44,Default,,0,0,0,,我说几个名字大家就知道了
Dialogue: 0,0:02:57.44,0:02:59.52,Default,,0,0,0,,MD5 SHA-1
Dialogue: 0,0:02:59.52,0:03:02.66,Default,,0,0,0,,那 MD5 平时看得都比较多
Dialogue: 0,0:03:02.66,0:03:04.44,Default,,0,0,0,,在网站上下载东西的时候
Dialogue: 0,0:03:04.44,0:03:06.44,Default,,0,0,0,,它有可能会给你一个 MD5 码
Dialogue: 0,0:03:06.44,0:03:07.74,Default,,0,0,0,,你在下载之后
Dialogue: 0,0:03:07.74,0:03:10.82,Default,,0,0,0,,用本地的程序来算一遍 MD5
Dialogue: 0,0:03:10.82,0:03:13.26,Default,,0,0,0,,然后对比一下 MD5 码
Dialogue: 0,0:03:13.26,0:03:16.14,Default,,0,0,0,,就可以知道这个文件下载下来是不是完整的
Dialogue: 0,0:03:16.14,0:03:19.02,Default,,0,0,0,,那 SHA-1 呢，假如你用过 Git 你就知道了
Dialogue: 0,0:03:19.02,0:03:21.92,Default,,0,0,0,,Git 内部存储的对象
Dialogue: 0,0:03:21.92,0:03:23.60,Default,,0,0,0,,就是用 SHA-1 来表示的
Dialogue: 0,0:03:23.60,0:03:26.36,Default,,0,0,0,,SHA-2 和 SHA-3 呢可能见得比较少一点
Dialogue: 0,0:03:26.36,0:03:30.06,Default,,0,0,0,,SHA-2 最有代表性的就是 SHA-256
Dialogue: 0,0:03:31.48,0:03:34.72,Default,,0,0,0,,SHA-256 也要比前面几个安全一点
Dialogue: 0,0:03:34.72,0:03:37.02,Default,,0,0,0,,SHA-3 呢我等会会介绍
Dialogue: 0,0:03:37.02,0:03:39.66,Default,,0,0,0,,是一种和 SHA-2 差不多
Dialogue: 0,0:03:39.66,0:03:42.86,Default,,0,0,0,,但是算法（原理）完全不一样的一个Hash函数
Dialogue: 0,0:03:43.20,0:03:45.54,Default,,0,0,0,,Hash 到底是一个什么东西呢
Dialogue: 0,0:03:45.54,0:03:47.80,Default,,0,0,0,,Hash 是一种信息摘要算法
Dialogue: 0,0:03:47.80,0:03:49.14,Default,,0,0,0,,什么意思呢？
Dialogue: 0,0:03:49.14,0:03:51.64,Default,,0,0,0,,Hash 是一个数学函数
Dialogue: 0,0:03:51.64,0:03:54.42,Default,,0,0,0,,它可以接受一段任意长度的数据
Dialogue: 0,0:03:55.30,0:03:58.14,Default,,0,0,0,,不管是短还是长，这样一段长度的数据
Dialogue: 0,0:03:58.14,0:04:00.62,Default,,0,0,0,,跑这样一个 Hash 算法出来的
Dialogue: 0,0:04:00.62,0:04:04.00,Default,,0,0,0,,是一段比较短的、固定长度的数据
Dialogue: 0,0:04:04.00,0:04:07.36,Default,,0,0,0,,这样的一段数据就是它的信息摘要
Dialogue: 0,0:04:07.36,0:04:09.78,Default,,0,0,0,,是对于原始数据的一个摘要（Digest）
Dialogue: 0,0:04:10.54,0:04:12.96,Default,,0,0,0,,我们在这里讲的 Hash 函数
Dialogue: 0,0:04:12.96,0:04:15.54,Default,,0,0,0,,主要是密码学的 Hash 函数
Dialogue: 0,0:04:12.96,0:04:15.54,Up,,0,0,0,,"Cryptographic Hash Function"
Dialogue: 0,0:04:15.54,0:04:17.44,Default,,0,0,0,,Hash 函数还要分很多种的
Dialogue: 0,0:04:17.44,0:04:20.18,Default,,0,0,0,,但是所有 Hash 函数都是这样一个信息摘要
Dialogue: 0,0:04:20.18,0:04:23.06,Default,,0,0,0,,密码学里的 Hash 函数呢
Dialogue: 0,0:04:23.06,0:04:25.38,Default,,0,0,0,,它的特点就更加明显一点
Dialogue: 0,0:04:25.38,0:04:27.44,Default,,0,0,0,,在密码学中的 Hash 函数
Dialogue: 0,0:04:27.44,0:04:29.26,Default,,0,0,0,,它主要有五个特点
Dialogue: 0,0:04:29.26,0:04:31.36,Default,,0,0,0,,我一一把它介绍一下
Dialogue: 0,0:04:31.36,0:04:33.08,Default,,0,0,0,,那第一个特点呢
Dialogue: 0,0:04:33.08,0:04:36.54,Default,,0,0,0,,就是同样的输入，必须产生同样的输出
Dialogue: 0,0:04:36.54,0:04:39.40,Default,,0,0,0,,假如你把这一份文件拷贝到别的电脑上
Dialogue: 0,0:04:39.40,0:04:40.80,Default,,0,0,0,,同样的一份文件
Dialogue: 0,0:04:40.80,0:04:43.92,Default,,0,0,0,,然后跑同样一个 Hash 算法
Dialogue: 0,0:04:44.76,0:04:47.48,Default,,0,0,0,,它必定是有同样的输出的
Dialogue: 0,0:04:47.48,0:04:51.22,Default,,0,0,0,,这就是为什么我们可以用 Hash 函数
Dialogue: 0,0:04:51.22,0:04:55.04,Default,,0,0,0,,来验证文件下载的完整性
Dialogue: 0,0:04:55.04,0:04:57.26,Default,,0,0,0,,因为这个文件下载到你的电脑上
Dialogue: 0,0:04:57.26,0:04:59.22,Default,,0,0,0,,你用同样的 Hash 算法
Dialogue: 0,0:04:59.22,0:05:01.70,Default,,0,0,0,,它输出的结果肯定是一样的
Dialogue: 0,0:05:02.26,0:05:04.62,Default,,0,0,0,,第二个特点呢是 Hash 函数
Dialogue: 0,0:05:04.62,0:05:06.94,Default,,0,0,0,,正着算过去
Dialogue: 0,0:05:06.94,0:05:08.56,Default,,0,0,0,,它的速度很快
Dialogue: 0,0:05:09.30,0:05:10.98,Default,,0,0,0,,第三个特点呢
Dialogue: 0,0:05:10.98,0:05:13.42,Default,,0,0,0,,是反着算回来
Dialogue: 0,0:05:13.42,0:05:15.82,Default,,0,0,0,,是基本上不可能的
Dialogue: 0,0:05:15.82,0:05:17.90,Default,,0,0,0,,假如你知道一个 Hash
Dialogue: 0,0:05:17.90,0:05:19.84,Default,,0,0,0,,知道这个 Hash 的算法
Dialogue: 0,0:05:19.84,0:05:22.28,Default,,0,0,0,,即使基本上不可能
Dialogue: 0,0:05:22.28,0:05:24.14,Default,,0,0,0,,从这个信息摘要
Dialogue: 0,0:05:24.14,0:05:26.68,Default,,0,0,0,,反回来算，算出原始数据
Dialogue: 0,0:05:26.68,0:05:29.84,Default,,0,0,0,,也就是这个函数是单向的函数 (One-way function）
Dialogue: 0,0:05:29.84,0:05:31.18,Default,,0,0,0,,只可以正着算过去
Dialogue: 0,0:05:31.18,0:05:32.60,Default,,0,0,0,,而且正着算过去很快
Dialogue: 0,0:05:32.60,0:05:34.26,Default,,0,0,0,,但是不可以反着算回来
Dialogue: 0,0:05:34.68,0:05:36.78,Default,,0,0,0,,第四个特点呢是
Dialogue: 0,0:05:36.78,0:05:40.06,Default,,0,0,0,,假如说你的原始文件
Dialogue: 0,0:05:40.06,0:05:42.64,Default,,0,0,0,,只改动了一点点
Dialogue: 0,0:05:42.64,0:05:44.84,Default,,0,0,0,,跑同样一个 Hash 函数
Dialogue: 0,0:05:45.96,0:05:48.08,Default,,0,0,0,,它的输出会完全不一样
Dialogue: 0,0:05:48.08,0:05:51.32,Default,,0,0,0,,这两个输出会完全不一样
Dialogue: 0,0:05:51.32,0:05:54.74,Default,,0,0,0,,这就是雪崩效应（Avalanche Effect）
Dialogue: 0,0:05:54.74,0:05:56.54,Default,,0,0,0,,这就保证了
Dialogue: 0,0:05:56.54,0:05:59.16,Default,,0,0,0,,只要原始数据有一点点改动
Dialogue: 0,0:05:59.16,0:06:01.04,Default,,0,0,0,,就可以很明显地看出
Dialogue: 0,0:06:01.04,0:06:05.12,Default,,0,0,0,,它的 Hash 有非常大的差异
Dialogue: 0,0:06:05.12,0:06:06.86,Default,,0,0,0,,第五个特点呢
Dialogue: 0,0:06:06.86,0:06:09.78,Default,,0,0,0,,假如你要用一个 Hash 函数
Dialogue: 0,0:06:09.78,0:06:12.68,Default,,0,0,0,,找两个不同的数据（输入）
Dialogue: 0,0:06:12.68,0:06:14.54,Default,,0,0,0,,两个完全不一样的数据
Dialogue: 0,0:06:12.68,0:06:14.54,Up,,0,0,0,,（不用“完全”不一样）
Dialogue: 0,0:06:14.54,0:06:17.60,Default,,0,0,0,,让它输出相同的 Hash 值
Dialogue: 0,0:06:17.60,0:06:20.88,Default,,0,0,0,,跑同一个 Hash 算法，输出相同的 Hash 值
Dialogue: 0,0:06:20.88,0:06:23.64,Default,,0,0,0,,这样的做法是非常困难的
Dialogue: 0,0:06:23.64,0:06:27.64,Default,,0,0,0,,你不大可能通过正常的方法找到两个
Dialogue: 0,0:06:27.64,0:06:31.82,Default,,0,0,0,,不同的原始数据，生成相同的 Hash 值
Dialogue: 0,0:06:31.82,0:06:34.52,Default,,0,0,0,,（不然）的话，这个 Hash 函数就不安全了
Dialogue: 0,0:06:34.52,0:06:37.30,Default,,0,0,0,,关于 Hash 函数呢有非常多的用途
Dialogue: 0,0:06:37.30,0:06:40.64,Default,,0,0,0,,我刚才已经说了，一个最主要的用途就是
Dialogue: 0,0:06:40.64,0:06:42.18,Default,,0,0,0,,验证文件完整性
Dialogue: 0,0:06:42.18,0:06:44.96,Default,,0,0,0,,平时用的比较多的呢，也是这种
Dialogue: 0,0:06:44.96,0:06:47.92,Default,,0,0,0,,比如说你要发一个网络传输的包
Dialogue: 0,0:06:47.92,0:06:49.92,Default,,0,0,0,,（收到后）要算一个 Checksum
Dialogue: 0,0:06:49.92,0:06:52.52,Default,,0,0,0,,这个 Checksum 就是一个 Hash 函数
Dialogue: 0,0:06:52.52,0:06:54.80,Default,,0,0,0,,用来验证这个包有没有被损坏
Dialogue: 0,0:06:54.80,0:06:56.34,Default,,0,0,0,,有没有被人为篡改
Dialogue: 0,0:06:56.34,0:06:57.52,Default,,0,0,0,,假如被损坏的话
Dialogue: 0,0:06:57.52,0:07:01.30,Default,,0,0,0,,就要求另一边重新发送
Dialogue: 0,0:07:01.30,0:07:03.36,Default,,0,0,0,,那另外一个非常重要的用途
Dialogue: 0,0:07:03.36,0:07:04.70,Default,,0,0,0,,就是储存密码
Dialogue: 0,0:07:04.70,0:07:07.80,Default,,0,0,0,, 你平时网站上输的用户名和密码
Dialogue: 0,0:07:07.80,0:07:11.48,Default,,0,0,0,,这个密码是千万不可以（明文）存储在服务器上的
Dialogue: 0,0:07:11.48,0:07:13.68,Default,,0,0,0,,因为服务器都是有可能被黑的
Dialogue: 0,0:07:13.68,0:07:15.60,Default,,0,0,0,,假如那台服务器被黑了的话
Dialogue: 0,0:07:15.60,0:07:17.42,Default,,0,0,0,,所有人的明文密码
Dialogue: 0,0:07:17.42,0:07:20.80,Default,,0,0,0,,明文密码就会被窃走
Dialogue: 0,0:07:20.80,0:07:22.74,Default,,0,0,0,,那很多人的密码呢
Dialogue: 0,0:07:22.74,0:07:26.90,Default,,0,0,0,,在很多网站上用同一个密码
Dialogue: 0,0:07:26.90,0:07:29.52,Default,,0,0,0,,（所以）明文密码被窃走是非常危险的事情
Dialogue: 0,0:07:29.80,0:07:33.04,Default,,0,0,0,,我刚才说了，Hash 函数的特点
Dialogue: 0,0:07:33.20,0:07:35.10,Default,,0,0,0,,正着算容易，反着算难
Dialogue: 0,0:07:35.10,0:07:38.78,Default,,0,0,0,,假如你在服务器上存储 Hash 的话
Dialogue: 0,0:07:38.78,0:07:41.16,Default,,0,0,0,,即使这台服务器被黑了
Dialogue: 0,0:07:41.16,0:07:42.84,Default,,0,0,0,,盗走的也只是 Hash
Dialogue: 0,0:07:42.84,0:07:44.92,Default,,0,0,0,,它不会盗走明文密码
Dialogue: 0,0:07:44.92,0:07:47.00,Default,,0,0,0,,那么假如你储存 Hash 的话
Dialogue: 0,0:07:47.00,0:07:50.12,Default,,0,0,0,, 平时你登陆的时候输入密码
Dialogue: 0,0:07:50.12,0:07:52.56,Default,,0,0,0,,它可以很快地计算一个 Hash
Dialogue: 0,0:07:52.56,0:07:55.36,Default,,0,0,0,,来和服务器上储存的密码作对比
Dialogue: 0,0:07:55.36,0:07:58.20,Default,,0,0,0,,这样的话对服务器压力也不是很大
Dialogue: 0,0:07:58.20,0:08:01.08,Default,,0,0,0,,它就会保证非常非常安全
Dialogue: 0,0:08:02.02,0:08:05.32,Default,,0,0,0,,我现在介绍一下几种常见的 Hash 算法
Dialogue: 0,0:08:05.32,0:08:09.96,Default,,0,0,0,,正常情况下 Hash 算法输出的信息摘要
Dialogue: 0,0:08:09.96,0:08:11.38,Default,,0,0,0,,是固定长度的
Dialogue: 0,0:08:11.38,0:08:14.72,Default,,0,0,0,,比如 MD5，它输出的长度就是128位
Dialogue: 0,0:08:14.72,0:08:17.02,Default,,0,0,0,,SHA-1 的输出长度是160位
Dialogue: 0,0:08:17.02,0:08:19.56,Default,,0,0,0,,SHA-2 要分很多种
Dialogue: 0,0:08:19.56,0:08:22.94,Default,,0,0,0,,SHA-2 是一组 Hash 算法
Dialogue: 0,0:08:22.94,0:08:25.62,Default,,0,0,0,,比如说 SHA-256（SHA-2 的一种）
Dialogue: 0,0:08:25.62,0:08:27.74,Default,,0,0,0,,它输出的长度就是256位
Dialogue: 0,0:08:27.74,0:08:33.04,Default,,0,0,0,,那 SHA-384 它的输出长度就是384位
Dialogue: 0,0:08:33.68,0:08:36.54,Default,,0,0,0,,SHA-3 呢，我等会再讲
Dialogue: 0,0:08:36.54,0:08:39.30,Default,,0,0,0,,SHA-3 和 SHA-2 其实是差不多的一个东西
Dialogue: 0,0:08:39.30,0:08:41.36,Default,,0,0,0,,我先讲 MD5 和 SHA-1
Dialogue: 0,0:08:41.36,0:08:44.86,Default,,0,0,0,,MD5 和 SHA-1 都是已经被破解了的
Dialogue: 0,0:08:44.86,0:08:47.46,Default,,0,0,0,,被破解了是什么意思呢
Dialogue: 0,0:08:50.10,0:08:52.50,Default,,0,0,0,,首先讲一下 Hash 的碰撞
Dialogue: 0,0:08:52.50,0:08:54.46,Default,,0,0,0,,我刚才说了，正常情况下
Dialogue: 0,0:08:54.46,0:08:57.82,Default,,0,0,0,,你不可能找到两个不同的
Dialogue: 0,0:08:58.60,0:09:01.94,Default,,0,0,0,,原始数据，跑同样一个 Hash 算法
Dialogue: 0,0:09:01.94,0:09:04.92,Default,,0,0,0,,输出一个相同的结果
Dialogue: 0,0:09:04.92,0:09:07.82,Default,,0,0,0,,但是到现在为止，这两个算法
Dialogue: 0,0:09:07.82,0:09:10.02,Default,,0,0,0,,已经有可能
Dialogue: 0,0:09:10.02,0:09:13.32,Default,,0,0,0,,（用相对小的计算量）实现两个不同的输入产生相同的结果
Dialogue: 0,0:09:13.32,0:09:17.70,Default,,0,0,0,,MD5 其实是很容易做出这个东西的
Dialogue: 0,0:09:17.70,0:09:24.18,Default,,0,0,0,,只要普通的手机，几秒钟就可以产生 Hash 的碰撞
Dialogue: 0,0:09:17.70,0:09:28.18,Up,,0,0,0,,这个“几秒”产生的碰撞并不能篡改已知数据得到同样的MD5\N所以 MD5 没有那么不安全\N
Dialogue: 0,0:09:24.18,0:09:25.86,Default,,0,0,0,,SHA-1 呢，目前来说
Dialogue: 0,0:09:25.86,0:09:27.88,Default,,0,0,0,,（用）个人电脑（来产生碰撞）还是非常困难的
Dialogue: 0,0:09:27.88,0:09:30.82,Default,,0,0,0,,SHA-1 被破解还是最近的事情
Dialogue: 0,0:09:30.82,0:09:34.60,Default,,0,0,0,,谷歌用它的计算能力
Dialogue: 0,0:09:30.82,0:09:36.60,Up,,0,0,0,,谷歌也不可能通过暴力破解来计算 Hash 碰撞\N要产生碰撞还是要找到算法里的弱点，然后通过一些特殊手段计算
Dialogue: 0,0:09:34.60,0:09:37.94,Default,,0,0,0,,来算出了一组 SHA-1 的碰撞
Dialogue: 0,0:09:37.94,0:09:40.18,Default,,0,0,0,,我刚才讲了那么多，那么大家是不是觉得
Dialogue: 0,0:09:37.94,0:09:40.18,Up,,0,0,0,,这里插入一段，原来讲错了
Dialogue: 0,0:09:40.18,0:09:41.72,Default,,0,0,0,,MD5 和 SHA-1 不安全？
Dialogue: 0,0:09:41.72,0:09:42.78,Default,,0,0,0,,其实不是的
Dialogue: 0,0:09:42.78,0:09:45.76,Default,,0,0,0,,对 MD5 和 SHA-1 的碰撞攻击
Dialogue: 0,0:09:45.76,0:09:50.12,Default,,0,0,0,,你要碰撞，你必须对两个原始文件
Dialogue: 0,0:09:50.12,0:09:51.94,Default,,0,0,0,,（原始数据）都有控制
Dialogue: 0,0:09:51.94,0:09:55.68,Default,,0,0,0,,在两个数据同时更改的情况下
Dialogue: 0,0:09:55.68,0:09:58.72,Default,,0,0,0,,才有可能产生碰撞
Dialogue: 0,0:09:58.72,0:10:00.50,Default,,0,0,0,,碰撞出同一个 Hash
Dialogue: 0,0:10:00.50,0:10:04.22,Default,,0,0,0,,但是假如你要验证文件完整性的话
Dialogue: 0,0:10:04.22,0:10:05.86,Default,,0,0,0,,它有一个源文件
Dialogue: 0,0:10:05.86,0:10:09.64,Default,,0,0,0,,算 Hash 算出来的这个值是已知的（不可改变的）
Dialogue: 0,0:10:09.64,0:10:12.88,Default,,0,0,0,,你对源文件和 Hash 值是没有控制的
Dialogue: 0,0:10:12.88,0:10:15.30,Default,,0,0,0,,在这种情况下，到目前为止
Dialogue: 0,0:10:15.30,0:10:19.92,Default,,0,0,0,,还是无法实现产生一段另外的、篡改过的数据
Dialogue: 0,0:10:19.92,0:10:21.66,Default,,0,0,0,,使它产生同样的 Hash
Dialogue: 0,0:10:21.66,0:10:24.98,Default,,0,0,0,,所以说用 MD5 和 SHA-1 来验证文件完整性
Dialogue: 0,0:10:24.98,0:10:26.72,Default,,0,0,0,,是完全完全没有问题的
Dialogue: 0,0:10:26.72,0:10:29.02,Default,,0,0,0,,那为什么说 MD5 不安全呢
Dialogue: 0,0:10:29.02,0:10:30.02,Default,,0,0,0,,其实是这样的
Dialogue: 0,0:10:30.02,0:10:32.74,Default,,0,0,0,,MD5 计算的速度实在是太快了
Dialogue: 0,0:10:32.74,0:10:35.48,Default,,0,0,0,,那计算速度快了对它来说是一个缺点
Dialogue: 0,0:10:35.48,0:10:38.00,Default,,0,0,0,,假如你用 MD5 来存储密码的话
Dialogue: 0,0:10:38.00,0:10:40.06,Default,,0,0,0,,那么攻击者就可以
Dialogue: 0,0:10:40.06,0:10:43.72,Default,,0,0,0,,很快用普通的CPU来试很多组合
Dialogue: 0,0:10:43.72,0:10:46.84,Default,,0,0,0,,这样暴力破解就会更加容易
Dialogue: 0,0:10:47.10,0:10:50.02,Default,,0,0,0,,那像 MD5 这种算法再是被破解
Dialogue: 0,0:10:50.02,0:10:54.96,Default,,0,0,0,,现在也还是不可能实现从一段数据的摘要
Dialogue: 0,0:10:54.96,0:10:59.00,Default,,0,0,0,,反着算回来，算到原始的数据
Dialogue: 0,0:10:59.00,0:11:00.68,Default,,0,0,0,,这是不可能的
Dialogue: 0,0:11:01.22,0:11:03.26,Default,,0,0,0,,所以只能用暴力破解
Dialogue: 0,0:11:03.26,0:11:06.10,Default,,0,0,0,,那么如果你要非常安全的话
Dialogue: 0,0:11:06.10,0:11:08.94,Default,,0,0,0,,就推荐用SHA-2 （SHA-256）
Dialogue: 0,0:11:08.94,0:11:13.88,Default,,0,0,0,,这个算法是到目前为止比较标准的安全算法
Dialogue: 0,0:11:14.76,0:11:16.80,Default,,0,0,0,,那 SHA-3 又是怎么回事呢
Dialogue: 0,0:11:16.80,0:11:18.56,Default,,0,0,0,,SHA-2 和 SHA-3
Dialogue: 0,0:11:18.56,0:11:21.34,Default,,0,0,0,,是差不多的一组算法
Dialogue: 0,0:11:21.34,0:11:24.90,Default,,0,0,0,,但是 SHA-3 的原理和 SHA-2 是完全不一样的
Dialogue: 0,0:11:24.90,0:11:28.54,Default,,0,0,0,,所以 SHA-3 主要是对 SHA-2 做一个备用
Dialogue: 0,0:11:28.54,0:11:32.36,Default,,0,0,0,,假如 SHA-2 整一组都被破解的话
Dialogue: 0,0:11:32.36,0:11:33.56,Default,,0,0,0,,那还有 SHA-3
Dialogue: 0,0:11:33.56,0:11:38.04,Default,,0,0,0,,这样不同思路的一个算法可以使用
Dialogue: 0,0:11:38.62,0:11:42.98,Default,,0,0,0,,{\an5}{\fad(1000,1000)}{\fs80}我讲错的这一段，错在哪里呢？
Dialogue: 0,0:11:43.80,0:11:47.26,Default,,0,0,0,,所以说用 MD5 和 SHA-1 这两个 Hash 算法
Dialogue: 0,0:11:43.80,0:11:49.26,Up,,0,0,0,,这是很容易会犯的一个错误，常常听到有人说 MD5 不安全啦\N其实呢，没那么不安全
Dialogue: 0,0:11:49.26,0:11:55.50,Up,,0,0,0,,请参考 Wikipedia 词条 Cryptographic hash function\N对 Hash 的攻击有三种，碰撞只是其中一种
Dialogue: 0,0:11:55.50,0:12:00.66,Up,,0,0,0,,验证文件完整性、密码储存都不会受碰撞攻击的影响
Dialogue: 0,0:11:47.28,0:11:50.50,Default,,0,0,0,,到现在为止来验证文件的完整性
Dialogue: 0,0:11:50.50,0:11:52.92,Default,,0,0,0,,有可能会有一点问题
Dialogue: 0,0:11:52.92,0:11:55.66,Default,,0,0,0,,那 MD5 就不用说了，这是很容易被破解的
Dialogue: 0,0:11:55.66,0:12:00.12,Default,,0,0,0,,那 SHA-1 目前大体上还是安全的
Dialogue: 0,0:12:00.12,0:12:03.28,Default,,0,0,0,,因为假如你要攻击也得有很大的计算量
Dialogue: 0,0:12:03.28,0:12:05.28,Default,,0,0,0,,
